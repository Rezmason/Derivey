// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Level = function() {
	this.skyGradient = 0;
	this.skyHigh = 0;
	this.skyLow = 0;
	this.ground = 0;
	this.meshes = [];
	this.roadPath = this.makeRoadPath();
	this.build();
	this.finish();
};
Level.__name__ = true;
Level.prototype = {
	build: function() {
	}
	,drawRoadLine: function(roadPath,shapePath,xPos,width,style,start,end,divisions) {
		if(start == end) {
			return shapePath;
		}
		switch(style[1]) {
		case 0:
			width = Math.abs(width);
			var outsideOffset = xPos - width / 2;
			var insideOffset = xPos + width / 2;
			var outsidePoints = [];
			var insidePoints = [];
			var coverage = end - start;
			var coveredDivisions = Math.ceil(_$UInt_UInt_$Impl_$.toFloat(divisions) * coverage / roadPath.get_length()) | 0;
			var diff = _$UInt_UInt_$Impl_$.toFloat(1) / _$UInt_UInt_$Impl_$.toFloat(divisions);
			var i = start;
			while(i < end) {
				outsidePoints.push(ThreeUtils.getExtrudedPointAt(roadPath.curve,i,outsideOffset));
				insidePoints.push(ThreeUtils.getExtrudedPointAt(roadPath.curve,i,insideOffset));
				i += diff;
			}
			outsidePoints.push(ThreeUtils.getExtrudedPointAt(roadPath.curve,end,outsideOffset));
			insidePoints.push(ThreeUtils.getExtrudedPointAt(roadPath.curve,end,insideOffset));
			outsidePoints.reverse();
			if(start == 0 && end == 1) {
				ThreeUtils.addPath(shapePath,ThreeUtils.makePolygonPath(outsidePoints));
				ThreeUtils.addPath(shapePath,ThreeUtils.makePolygonPath(insidePoints));
			} else {
				ThreeUtils.addPath(shapePath,ThreeUtils.makePolygonPath(outsidePoints.concat(insidePoints)));
			}
			break;
		case 1:
			var off = style[3];
			var on = style[2];
			var dashStart = start;
			var dashSpan = (on + off) / roadPath.get_length();
			var dashLength = dashSpan * on / (on + off);
			while(dashStart < end) {
				this.drawRoadLine(roadPath,shapePath,xPos,width,RoadLineStyle.SOLID,dashStart,Math.min(end,dashStart + dashLength),divisions);
				dashStart += dashSpan;
			}
			break;
		case 2:
			var spacing = style[2];
			var dotStart = start;
			var dotSpan = spacing / roadPath.get_length();
			while(dotStart < end) {
				var pos = ThreeUtils.getExtrudedPointAt(roadPath.curve,dotStart,xPos);
				ThreeUtils.addPath(shapePath,ThreeUtils.makeCirclePath(pos.x,pos.y,width));
				dotStart += dotSpan;
			}
			break;
		}
		return shapePath;
	}
	,finish: function() {
		this.world = new THREE.Group();
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var mesh = _g1[_g];
			++_g;
			mesh.matrix.identity();
			console.log(mesh.matrix);
			this.world.add(mesh);
		}
	}
	,makeRoadPath: function() {
		var n = 16;
		var points = [];
		var minX = Infinity;
		var maxX = -Infinity;
		var minY = Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var theta = i * Math.PI * 2 / n;
			var radius = Math.random() + 5;
			var point = new THREE.Vector2(Math.cos(theta) * -radius,Math.sin(theta) * radius);
			points.push(point);
			minX = Math.min(minX,point.x);
			maxX = Math.max(maxX,point.x);
			minY = Math.min(minY,point.y);
			maxY = Math.max(maxY,point.y);
		}
		var centerX = (maxX + minX) * 0.5;
		var centerY = (maxY + minY) * 0.5;
		var width = maxX - minX;
		var height = maxY - minY;
		var _g2 = 0;
		while(_g2 < points.length) {
			var point1 = points[_g2];
			++_g2;
			point1.x -= centerX;
			point1.y -= centerY;
			point1.y *= width / height;
			point1.x *= 400;
			point1.y *= 400;
		}
		return new RoadPath(points);
	}
	,__class__: Level
};
var City = function() {
	Level.call(this);
};
City.__name__ = true;
City.__super__ = Level;
City.prototype = $extend(Level.prototype,{
	build: function() {
		this.name = "The City";
		this.tint = new THREE.Color(0.3,0.3,0.7).multiplyScalar(1.5);
		this.roadPath.scale(2,2);
		this.ground = 0.05;
		var roadLineColor = 0.6;
		this.skyLow = 0.4;
		var cloudsPath = new THREE.ShapePath();
		var _g = 0;
		while(_g < 100) {
			var i = _g++;
			var pos = new THREE.Vector2(Math.random() - 0.5,Math.random() - 0.5);
			if(pos.length() > 0.5 || pos.length() < 0.1) {
				continue;
			}
			pos.multiplyScalar(8000);
			ThreeUtils.addPath(cloudsPath,ThreeUtils.makeCirclePath(pos.x,pos.y,500));
		}
		var cloudsMesh = ThreeUtils.makeMesh(cloudsPath,1,200,(this.skyLow + this.skyHigh) / 2);
		cloudsMesh.scale.multiplyScalar(2);
		cloudsMesh.position.z = 400;
		this.meshes.push(cloudsMesh);
		var skylinePath1 = new THREE.ShapePath();
		var skylinePath2 = new THREE.ShapePath();
		var skylinePath3 = new THREE.ShapePath();
		var skylinePath4 = new THREE.ShapePath();
		var mag = 4;
		var width = 40 * mag;
		var radius = 1800 * mag;
		var x = -radius;
		while(x < radius) {
			var y = -radius;
			while(y < radius) {
				var pos1 = new THREE.Vector2(x,y);
				if(pos1.length() < radius && ThreeUtils.distance(this.roadPath.getNearestPoint(pos1),pos1) > 60 * mag) {
					var building = ThreeUtils.makeRectanglePath(pos1.x + -width / 2,pos1.y + -width / 2,width,width);
					if(Math.random() > 0.8) {
						ThreeUtils.addPath(skylinePath1,building);
					} else if(Math.random() > 0.5) {
						ThreeUtils.addPath(skylinePath2,building);
					} else if(Math.random() > 0.25) {
						ThreeUtils.addPath(skylinePath3,building);
					} else {
						ThreeUtils.addPath(skylinePath4,building);
					}
				}
				y += 150 * mag;
			}
			x += 150 * mag;
		}
		this.meshes.push(ThreeUtils.makeMesh(skylinePath2,60,1,this.ground));
		this.meshes.push(ThreeUtils.makeMesh(skylinePath3,100,1,this.ground));
		this.meshes.push(ThreeUtils.makeMesh(skylinePath4,240,1,this.ground));
		var signpostsPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,signpostsPath,-16,0.2,RoadLineStyle.DASH(0.2,400),0,1,1);
		this.drawRoadLine(this.roadPath,signpostsPath,-12,0.2,RoadLineStyle.DASH(0.2,400),0,1,1);
		this.drawRoadLine(this.roadPath,signpostsPath,12,0.2,RoadLineStyle.DASH(0.2,300),0,1,1);
		this.drawRoadLine(this.roadPath,signpostsPath,16,0.2,RoadLineStyle.DASH(0.2,300),0,1,1);
		this.meshes.push(ThreeUtils.makeMesh(signpostsPath,10,0,this.ground));
		var signsPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,signsPath,-14,6,RoadLineStyle.DASH(0.2,400),0,1,1);
		this.drawRoadLine(this.roadPath,signsPath,14,6,RoadLineStyle.DASH(0.2,300),0,1,1);
		var signsMesh = ThreeUtils.makeMesh(signsPath,4,0,this.ground);
		signsMesh.position.z = 10;
		this.meshes.push(signsMesh);
		var roadLinesPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,roadLinesPath,0,0.1,RoadLineStyle.SOLID,0,1,1);
		this.drawRoadLine(this.roadPath,roadLinesPath,0.2,0.1,RoadLineStyle.SOLID,0,1,1);
		this.drawRoadLine(this.roadPath,roadLinesPath,-6,0.15,RoadLineStyle.DASH(30,1),0,1,1);
		this.drawRoadLine(this.roadPath,roadLinesPath,6,0.15,RoadLineStyle.DASH(30,1),0,1,1);
		this.drawRoadLine(this.roadPath,roadLinesPath,-3,0.15,RoadLineStyle.DASH(3,12),0,1,1);
		this.drawRoadLine(this.roadPath,roadLinesPath,3,0.15,RoadLineStyle.DASH(3,12),0,1,1);
		this.meshes.push(ThreeUtils.makeMesh(roadLinesPath,0,1,roadLineColor));
	}
	,__class__: City
});
var Dashboard = function() {
	var _gthis = this;
	this.object = new THREE.Group();
	var addDashboardElement = function(path,edgeAmount,hasFill) {
		if(edgeAmount == null) {
			edgeAmount = 0;
		}
		var element = new THREE.Group();
		if(edgeAmount != 0) {
			var edge = ThreeUtils.makeMesh(ThreeUtils.expandShapePath(path,1 + edgeAmount,250),0,0,0.2);
			edge.position.z = -0.1;
			element.add(edge);
		}
		if(hasFill && edgeAmount != 0) {
			var fill = ThreeUtils.makeMesh(ThreeUtils.expandShapePath(path,1,250),0,0,0);
			fill.position.z = 0;
			element.add(fill);
		} else if(hasFill) {
			var fill1 = ThreeUtils.makeMesh(path,0,240,0.2);
			fill1.position.z = 0;
			element.add(fill1);
		}
		_gthis.object.add(element);
		return element;
	};
	var edge1 = 2;
	var backing = addDashboardElement(this.makeDashboardBacking(),edge1,true);
	backing.position.set(-50,-80,-110);
	var speedometer1 = addDashboardElement(this.makeSpeedometer(),0,true);
	speedometer1.position.set(-25,-35,-105);
	this.needle1 = addDashboardElement(this.makeNeedle(),0,true);
	this.needle1.position.set(-25,-35,-105);
	var speedometer2 = addDashboardElement(this.makeSpeedometer(),0,true);
	speedometer2.position.set(-70,-35,-105);
	this.needle2 = addDashboardElement(this.makeNeedle(),0,true);
	this.needle2.position.set(-70,-35,-105);
	this.wheel = addDashboardElement(this.makeSteeringWheel(),edge1,true);
	this.wheel.position.set(-50,-55,-100);
	this.wheel.rotation.z = Math.PI;
};
Dashboard.__name__ = true;
Dashboard.prototype = {
	makeDashboardBacking: function() {
		var pts = [new THREE.Vector2(-200,-40),new THREE.Vector2(-200,40),new THREE.Vector2(200,40),new THREE.Vector2(200,-40)];
		var path = ThreeUtils.makeSplinePath(pts,true);
		var shapePath = new THREE.ShapePath();
		shapePath.subPaths.push(path);
		return shapePath;
	}
	,makeSpeedometer: function() {
		var shapePath = new THREE.ShapePath();
		var outerRadius = 20;
		var innerRadius = outerRadius - 1;
		var dashEnd = innerRadius - 2;
		var outerRim = ThreeUtils.makeCirclePath(0,0,outerRadius);
		var innerRim = ThreeUtils.makeCirclePath(0,0,innerRadius,false);
		shapePath.subPaths.push(outerRim);
		shapePath.subPaths.push(innerRim);
		var nudge = Math.PI * 0.0075;
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var angle = Math.PI * 2 * (i + 0.5) / 10;
			shapePath.subPaths.push(ThreeUtils.makePolygonPath([new THREE.Vector2(Math.cos(angle - nudge) * outerRadius,Math.sin(angle - nudge) * outerRadius),new THREE.Vector2(Math.cos(angle - nudge) * dashEnd,Math.sin(angle - nudge) * dashEnd),new THREE.Vector2(Math.cos(angle + nudge) * dashEnd,Math.sin(angle + nudge) * dashEnd),new THREE.Vector2(Math.cos(angle + nudge) * outerRadius,Math.sin(angle + nudge) * outerRadius)]));
		}
		return shapePath;
	}
	,makeNeedle: function() {
		var shapePath = new THREE.ShapePath();
		var scale = 40;
		shapePath.subPaths.push(ThreeUtils.makePolygonPath([new THREE.Vector2(-0.02 * scale,0.1 * scale),new THREE.Vector2(-0.005 * scale,-0.4 * scale),new THREE.Vector2(0.005 * scale,-0.4 * scale),new THREE.Vector2(0.02 * scale,0.1 * scale)]));
		return shapePath;
	}
	,makeSteeringWheel: function() {
		var scale = 148;
		var shapePath = new THREE.ShapePath();
		var outerRim = ThreeUtils.makeCirclePath(0,0,scale * 0.5);
		var innerRim1Points = [];
		var n = 60;
		var _g = 0;
		while(_g < 25) {
			var i = _g++;
			var theta = (57 - i) * Math.PI * 2 / n;
			var mag = ((i & 1) != 0 ? 0.435 : 0.45) * scale;
			innerRim1Points.push(new THREE.Vector2(Math.cos(theta) * mag,Math.sin(theta) * mag));
		}
		innerRim1Points.reverse();
		var innerRim1 = ThreeUtils.makeSplinePath(innerRim1Points,true);
		var innerRim2Points = [];
		var _g1 = 0;
		while(_g1 < 29) {
			var i1 = _g1++;
			var theta1 = (29 - i1) * 2 * Math.PI / n;
			var mag1 = ((i1 & 1) != 0 ? 0.435 : 0.45) * scale;
			innerRim2Points.push(new THREE.Vector2(Math.cos(theta1) * mag1,Math.sin(theta1) * mag1));
		}
		innerRim2Points.push(new THREE.Vector2(scale * 0.25,scale * 0.075));
		innerRim2Points.push(new THREE.Vector2(scale * 0.125,scale * 0.2));
		innerRim2Points.push(new THREE.Vector2(scale * -0.125,scale * 0.2));
		innerRim2Points.push(new THREE.Vector2(scale * -0.25,scale * 0.075));
		innerRim2Points.reverse();
		var innerRim2 = ThreeUtils.makeSplinePath(innerRim2Points,true);
		shapePath.subPaths.push(outerRim);
		shapePath.subPaths.push(innerRim1);
		shapePath.subPaths.push(innerRim2);
		return shapePath;
	}
	,get_wheelRotation: function() {
		return this.wheel.rotation.z;
	}
	,set_wheelRotation: function(value) {
		this.wheel.rotation.z = value;
		return value;
	}
	,get_needle1Rotation: function() {
		return this.needle1.rotation.z;
	}
	,set_needle1Rotation: function(value) {
		this.needle1.rotation.z = value;
		return value;
	}
	,get_needle2Rotation: function() {
		return this.needle2.rotation.z;
	}
	,set_needle2Rotation: function(value) {
		this.needle2.rotation.z = value;
		return value;
	}
	,__class__: Dashboard
};
var DeepDarkNight = function() {
	Level.call(this);
};
DeepDarkNight.__name__ = true;
DeepDarkNight.__super__ = Level;
DeepDarkNight.prototype = $extend(Level.prototype,{
	build: function() {
		this.name = "The Deep Dark Night";
		this.tint = new THREE.Color(0.7,0.7,0.7);
		var roadLineColor = 0.75;
		this.roadPath.scale(2,2);
		var nightLinePath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,nightLinePath,0,0.2,RoadLineStyle.DASH(4,10),0,1,1);
		this.drawRoadLine(this.roadPath,nightLinePath,-3,0.15,RoadLineStyle.DASH(30,2),0,1,10);
		this.drawRoadLine(this.roadPath,nightLinePath,3,0.15,RoadLineStyle.DASH(30,2),0,1,10);
		this.meshes.push(ThreeUtils.makeMesh(nightLinePath,0,1,roadLineColor));
		var nightPostPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,nightPostPath,-6,0.2,RoadLineStyle.DASH(0.2,50),0,1,1);
		this.drawRoadLine(this.roadPath,nightPostPath,6,0.2,RoadLineStyle.DASH(0.2,50),0,1,1);
		this.meshes.push(ThreeUtils.makeMesh(nightPostPath,0.6,1,roadLineColor));
	}
	,__class__: DeepDarkNight
});
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IndustrialZone = function() {
	Level.call(this);
};
IndustrialZone.__name__ = true;
IndustrialZone.__super__ = Level;
IndustrialZone.prototype = $extend(Level.prototype,{
	build: function() {
		this.name = "The Industrial Zone";
		this.tint = new THREE.Color(0.7,0.4,0.1);
		this.skyHigh = 0.15;
		this.skyLow = 1.0;
		this.skyGradient = 0.25;
		this.ground = 0.05;
		var whiteLinesColor = 0.6;
		var lightColor = 1.0;
		var industrialTallThingAPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialTallThingAPath,300,0.5,RoadLineStyle.DOT(250),0,1,1);
		this.drawRoadLine(this.roadPath,industrialTallThingAPath,320,0.75,RoadLineStyle.DOT(250),0,1,1);
		var industrialTallThingAMesh = ThreeUtils.makeMesh(industrialTallThingAPath,2,10,lightColor);
		industrialTallThingAMesh.position.z = 60;
		this.meshes.push(industrialTallThingAMesh);
		var industrialTallThingBPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialTallThingBPath,300,0.5,RoadLineStyle.DOT(250),0,1,1);
		this.drawRoadLine(this.roadPath,industrialTallThingBPath,320,0.75,RoadLineStyle.DOT(250),0,1,1);
		this.drawRoadLine(this.roadPath,industrialTallThingBPath,400,8,RoadLineStyle.DOT(240),0,1,1);
		this.drawRoadLine(this.roadPath,industrialTallThingBPath,500,8,RoadLineStyle.DOT(240),0,1,1);
		var industrialTallThingBMesh = ThreeUtils.makeMesh(industrialTallThingBPath,60,10,this.ground);
		this.meshes.push(industrialTallThingBMesh);
		var industrialMediumThingsPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,-80,20,RoadLineStyle.DASH(40,60),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,180,50,RoadLineStyle.DASH(40,30),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,300,50,RoadLineStyle.DASH(20,20),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,-100,8,RoadLineStyle.DOT(200),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,-60,8,RoadLineStyle.DOT(1500),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,100,8,RoadLineStyle.DOT(140),0,1,1);
		this.drawRoadLine(this.roadPath,industrialMediumThingsPath,120,8,RoadLineStyle.DOT(220),0,1,1);
		var industrialMediumThingsMesh = ThreeUtils.makeMesh(industrialMediumThingsPath,12,10,this.ground);
		this.meshes.push(industrialMediumThingsMesh);
		var industrialWhiteLinesPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialWhiteLinesPath,-3.5,0.15,RoadLineStyle.DASH(60,2),0,1,1000);
		this.drawRoadLine(this.roadPath,industrialWhiteLinesPath,3.5,0.15,RoadLineStyle.DASH(60,2),0,1,1000);
		this.drawRoadLine(this.roadPath,industrialWhiteLinesPath,-0.15,0.125,RoadLineStyle.DASH(4,6),0,1,1);
		this.drawRoadLine(this.roadPath,industrialWhiteLinesPath,0.125,0.125,RoadLineStyle.SOLID,0,1,1000);
		var industrialWhiteLinesMesh = ThreeUtils.makeMesh(industrialWhiteLinesPath,0,10,whiteLinesColor);
		this.meshes.push(industrialWhiteLinesMesh);
		var industrialCrossingPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialCrossingPath,0,1,RoadLineStyle.DASH(2,200),0,1,1);
		var industrialCrossingMesh = ThreeUtils.makeMesh(industrialCrossingPath,0,10,this.ground);
		industrialCrossingMesh.position.z = 0.001;
		this.meshes.push(industrialCrossingMesh);
		var industrialCrossingLinesPath = new THREE.ShapePath();
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var width = 0.5;
			this.drawRoadLine(this.roadPath,industrialCrossingLinesPath,i * 2 * width - 3 + width,width,RoadLineStyle.DASH(2,200),0,1,1);
		}
		var industrialCrossingLinesMesh = ThreeUtils.makeMesh(industrialCrossingLinesPath,0,10,whiteLinesColor);
		industrialCrossingLinesMesh.position.z = 0.01;
		this.meshes.push(industrialCrossingLinesMesh);
		var left = 80;
		var right = 80;
		var thick = 0.2;
		var tall = 15;
		var industrialStreetLight1Path = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialStreetLight1Path,-5.6,5,RoadLineStyle.DASH(thick,left),0,1,1);
		var industrialStreetLight1Mesh = ThreeUtils.makeMesh(industrialStreetLight1Path,thick,10,this.ground);
		industrialStreetLight1Mesh.position.z = tall + thick;
		this.meshes.push(industrialStreetLight1Mesh);
		var industrialStreetLight2Path = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialStreetLight2Path,-8,thick,RoadLineStyle.DASH(thick,left),0,1,1);
		var industrialStreetLight2Mesh = ThreeUtils.makeMesh(industrialStreetLight2Path,tall + thick,10,this.ground);
		this.meshes.push(industrialStreetLight2Mesh);
		var industrialStreetLight3Path = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialStreetLight3Path,-4,2,RoadLineStyle.DASH(thick,left),0,1,1);
		var industrialStreetLight3Mesh = ThreeUtils.makeMesh(industrialStreetLight3Path,thick * 2,10,lightColor);
		industrialStreetLight3Mesh.position.z = tall - thick;
		this.meshes.push(industrialStreetLight3Mesh);
		var depth = 8;
		var spacing = 300;
		var highwayAbove = this.roadPath.clone();
		highwayAbove.scale(1,1.5);
		var industrialOverpassAPath = new THREE.ShapePath();
		this.drawRoadLine(highwayAbove,industrialOverpassAPath,0,162,RoadLineStyle.DASH(depth,spacing),0,1,1);
		var industrialOverpassAMesh = ThreeUtils.makeMesh(industrialOverpassAPath,2,10,this.ground);
		industrialOverpassAMesh.position.z = 10;
		industrialOverpassAMesh.scale.set(1,0.66666666666666663,1);
		this.meshes.push(industrialOverpassAMesh);
		var industrialOverpassBPath = new THREE.ShapePath();
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,-100,42,RoadLineStyle.DASH(depth,spacing),0,1,1);
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,-40,2,RoadLineStyle.DASH(depth,spacing),0,1,1);
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,-15,2,RoadLineStyle.DASH(depth,spacing),0,1,1);
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,15,2,RoadLineStyle.DASH(depth,spacing),0,1,1);
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,40,2,RoadLineStyle.DASH(depth,spacing),0,1,1);
		this.drawRoadLine(highwayAbove,industrialOverpassBPath,200,242,RoadLineStyle.DASH(depth,spacing),0,1,1);
		var industrialOverpassBMesh = ThreeUtils.makeMesh(industrialOverpassBPath,10,10,this.ground);
		industrialOverpassBMesh.scale.set(1,0.66666666666666663,1);
		this.meshes.push(industrialOverpassBMesh);
		var industrialPolesPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialPolesPath,-30,0.25,RoadLineStyle.DOT(90),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,-40,0.25,RoadLineStyle.DOT(110),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,60,0.25,RoadLineStyle.DOT(60),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,-50,0.25,RoadLineStyle.DOT(60),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,-20,0.125,RoadLineStyle.DOT(100),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,20,0.25,RoadLineStyle.DOT(45),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,50,0.125,RoadLineStyle.DOT(50),0,1,1);
		this.drawRoadLine(this.roadPath,industrialPolesPath,70,0.25,RoadLineStyle.DOT(75),0,1,1);
		var industrialPolesMesh = ThreeUtils.makeMesh(industrialPolesPath,12,10,this.ground);
		this.meshes.push(industrialPolesMesh);
		var industrialKnobsPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialKnobsPath,-40,1,RoadLineStyle.DOT(110),0,1,1);
		this.drawRoadLine(this.roadPath,industrialKnobsPath,60,1,RoadLineStyle.DOT(60),0,1,1);
		var industrialKnobsMesh = ThreeUtils.makeMesh(industrialKnobsPath,1,10,this.ground);
		industrialKnobsMesh.position.z = 12;
		this.meshes.push(industrialKnobsMesh);
		var wireThickness = 0.075;
		var industrialWiresPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialWiresPath,-50,wireThickness,RoadLineStyle.DASH(60,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialWiresPath,-20,wireThickness,RoadLineStyle.DASH(100,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialWiresPath,20,wireThickness,RoadLineStyle.DASH(45,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialWiresPath,50,wireThickness,RoadLineStyle.DASH(50,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialWiresPath,70,wireThickness,RoadLineStyle.DASH(75,0),0,1,1);
		var industrialWiresMesh = ThreeUtils.makeMesh(industrialWiresPath,wireThickness,10,this.ground);
		industrialWiresMesh.position.z = 11.25;
		this.meshes.push(industrialWiresMesh);
		var tall1 = 5;
		var spacing1 = 30;
		var dist = 25;
		var industrialFenceAPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialFenceAPath,-dist,0.1,RoadLineStyle.DOT(spacing1),0,1,1);
		this.drawRoadLine(this.roadPath,industrialFenceAPath,dist,0.1,RoadLineStyle.DOT(spacing1),0,1,1);
		var industrialFenceAMesh = ThreeUtils.makeMesh(industrialFenceAPath,tall1,10,this.ground);
		this.meshes.push(industrialFenceAMesh);
		var industrialFenceBPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialFenceBPath,-dist,0.1,RoadLineStyle.DASH(spacing1,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialFenceBPath,dist,0.1,RoadLineStyle.DASH(spacing1,0),0,1,1);
		var industrialFenceBMesh = ThreeUtils.makeMesh(industrialFenceBPath,0.1,10,this.ground);
		industrialFenceBMesh.position.z = tall1 - 0.5;
		this.meshes.push(industrialFenceBMesh);
		var industrialFenceCPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,industrialFenceCPath,-dist,0.1,RoadLineStyle.DASH(spacing1,0),0,1,1);
		this.drawRoadLine(this.roadPath,industrialFenceCPath,dist,0.1,RoadLineStyle.DASH(spacing1,0),0,1,1);
		var industrialFenceCMesh = ThreeUtils.makeMesh(industrialFenceCPath,tall1 - 0.5,10,this.ground,0.25);
		this.meshes.push(industrialFenceCMesh);
	}
	,__class__: IndustrialZone
});
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var RoadLineStyle = { __ename__ : true, __constructs__ : ["SOLID","DASH","DOT"] };
RoadLineStyle.SOLID = ["SOLID",0];
RoadLineStyle.SOLID.__enum__ = RoadLineStyle;
RoadLineStyle.DASH = function(on,off) { var $x = ["DASH",1,on,off]; $x.__enum__ = RoadLineStyle; return $x; };
RoadLineStyle.DOT = function(spacing) { var $x = ["DOT",2,spacing]; $x.__enum__ = RoadLineStyle; return $x; };
var Main = function() {
	this.carT = 0;
	this.screen = new Screen();
	this.init();
	this.screen.addRenderListener($bind(this,this.update));
};
Main.__name__ = true;
Main.main = function() {
	window.document.addEventListener("DOMContentLoaded",function(event) {
		var main = new Main();
	});
};
Main.prototype = {
	init: function() {
		this.level = new IndustrialZone();
		this.dashboard = new Dashboard();
		this.skybox = new THREE.Group();
		var sky = this.makeSky();
		var ground = this.makeGround();
		this.skybox.add(sky);
		this.skybox.add(ground);
		this.playerCar = new THREE.Group();
		this.playerCar.rotation.order = "ZYX";
		this.player = new THREE.Group();
		this.playerCar.add(this.player);
		this.playerCar.add(new THREE.Mesh(new THREE.SphereGeometry(50,10,10),new THREE.MeshBasicMaterial({ color : 65280})));
		this.playerCar.add(this.skybox);
		this.player.add(this.screen.camera);
		this.player.add(this.dashboard.object);
		this.screen.scene.add(this.playerCar);
		this.screen.orthoCamera.position.set(0,0,1000000);
		this.screen.orthoCamera.up = new THREE.Vector3(0,0,1);
		this.screen.orthoCamera.zoom = 0.02;
		this.screen.orthoCamera.updateProjectionMatrix();
		this.screen.scene.add(this.level.world);
		ThreeUtils.silhouette.uniforms.tint = { value : this.level.tint};
		this.dashboard.object.scale.set(0.0018,0.0018,0.001);
	}
	,makeSky: function() {
		var size = 100000;
		var skyGeom = new THREE.SphereGeometry(size,50,50,0,Math.PI * 2,0,Math.PI / 2);
		var _g = 0;
		var _g1 = skyGeom.faces;
		while(_g < _g1.length) {
			var face = _g1[_g];
			++_g;
			var vertices = [skyGeom.vertices[face.a],skyGeom.vertices[face.b],skyGeom.vertices[face.c]];
			var _g2 = 0;
			while(_g2 < 3) {
				var i = _g2++;
				var color = new THREE.Color();
				color.setHSL(0,0,0.675 * (1 - vertices[i].y / size * 1.25));
				face.vertexColors[i] = color;
			}
		}
		var sky = new THREE.Mesh(skyGeom,new THREE.MeshBasicMaterial({ vertexColors : 2, side : 1}));
		return sky;
	}
	,makeGround: function() {
		var size = 100000;
		var groundGeom = new THREE.PlaneGeometry(size,size);
		var ground = new THREE.Mesh(groundGeom,new THREE.MeshBasicMaterial({ color : new THREE.Color(0,0,0)}));
		return ground;
	}
	,makeHeadlightPath: function() {
		var pts = [new THREE.Vector2(0,0),new THREE.Vector2(-6,13),new THREE.Vector2(4,15),new THREE.Vector2(0,0)];
		return ThreeUtils.makeSplinePath(pts,true);
	}
	,update: function() {
		var step = 0.0001;
		var simSpeed = 1.0;
		if(this.screen.isKeyDown("ShiftLeft") || this.screen.isKeyDown("ShiftRight")) {
			simSpeed = 0.125;
		} else if(this.screen.isKeyDown("ControlLeft") || this.screen.isKeyDown("ControlRight")) {
			simSpeed = 4;
		}
		var carSpeed = 6000;
		var roadMidOffset = -1.5;
		var carHeight = 1;
		this.carT = (this.carT + step * simSpeed * carSpeed / this.level.roadPath.get_length()) % 1;
		var carPosition = ThreeUtils.getExtrudedPointAt(this.level.roadPath.curve,this.carT,roadMidOffset);
		var nextPosition = ThreeUtils.getExtrudedPointAt(this.level.roadPath.curve,(this.carT + 0.001) % 1,roadMidOffset);
		var angle = Math.atan2(nextPosition.y - carPosition.y,nextPosition.x - carPosition.x) - Math.PI / 2;
		var tilt = ThreeUtils.diffAngle(angle,this.playerCar.rotation.z);
		this.dashboard.set_wheelRotation(ThreeUtils.lerpAngle(this.dashboard.get_wheelRotation(),Math.PI - tilt * 4,0.1 * simSpeed));
		this.playerCar.position.set(carPosition.x,carPosition.y,carHeight);
		this.playerCar.rotation.set(Math.PI * 0.5,0,ThreeUtils.lerpAngle(this.playerCar.rotation.z,angle,0.05 * simSpeed));
		this.player.rotation.x = Math.PI * -0.0625;
		this.screen.camera.rotation.z = ThreeUtils.lerpAngle(this.screen.camera.rotation.z,tilt,0.1 * simSpeed);
		var _g = this.dashboard;
		_g.set_needle1Rotation(_g.get_needle1Rotation() + step * simSpeed * 100);
		var _g1 = this.dashboard;
		_g1.set_needle2Rotation(_g1.get_needle2Rotation() + step * simSpeed * 100);
		if(this.screen.isKeyHit("KeyC")) {
			if(this.dashboard.object.parent != null) {
				this.player.remove(this.dashboard.object);
			} else {
				this.player.add(this.dashboard.object);
			}
		}
		if(this.screen.isKeyHit("Digit0")) {
			this.screen.useOrtho = !this.screen.useOrtho;
		}
		if(this.screen.isKeyHit("Digit2")) {
			this.screen.set_wireframe(!this.screen.wireframe);
		}
		if(this.screen.isKeyHit("Digit4")) {
			this.screen.camera.rotation.y += Math.PI;
		}
	}
	,__class__: Main
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var RoadPath = function(points) {
	this.points = points;
	this.curve = ThreeUtils.makeSplinePath(points,true);
};
RoadPath.__name__ = true;
RoadPath.prototype = {
	clone: function() {
		return new RoadPath(this.points);
	}
	,scale: function(x,y) {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.points;
		while(_g1 < _g2.length) {
			var point = _g2[_g1];
			++_g1;
			_g.push(new THREE.Vector2(point.x * x,point.y * y));
		}
		this.points = _g;
		this.approximation = null;
		this.curve = ThreeUtils.makeSplinePath(this.points,true);
	}
	,getPoint: function(t) {
		var point = this.curve.getPoint(t % 1);
		return new THREE.Vector2(point.x,point.y);
	}
	,getNormal: function(t) {
		var point = this.getPoint(t + 0.00001).sub(this.getPoint(t + 1 - 0.00001));
		return point.normalize();
	}
	,getTangent: function(t) {
		var normal = this.getNormal(t);
		return new THREE.Vector2(-normal.y,normal.x);
	}
	,getNearest: function(to) {
		if(this.approximation == null) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < 1000) {
				var i = _g1++;
				_g.push(this.getPoint(i / 1000));
			}
			this.approximation = _g;
		}
		return _$UInt_UInt_$Impl_$.toFloat(ThreeUtils.minDistSquaredIndex(this.approximation,to)) / _$UInt_UInt_$Impl_$.toFloat(1000);
	}
	,getNearestPoint: function(to) {
		return this.getPoint(this.getNearest(to));
	}
	,get_length: function() {
		return this.curve.getLength();
	}
	,__class__: RoadPath
};
var Screen = function() {
	this.messageOpacities = new haxe_ds_ObjectMap();
	this.renderListeners = [];
	this.keysHit = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	this.wireframe = false;
	this.downscale = 1;
	this.useOrtho = false;
	this.element = window.document.createElement("div");
	window.document.body.appendChild(this.element);
	this.scene = new THREE.Scene();
	this.camera = new THREE.PerspectiveCamera(90,1,0.001,100000);
	this.camera.rotation.order = "YZX";
	this.scene.add(this.camera);
	this.orthoCamera = new THREE.OrthographicCamera(0,0,0,0,1,100000000);
	this.scene.add(this.orthoCamera);
	this.renderer = new THREE.WebGLRenderer({ antialias : true});
	this.renderer.setPixelRatio(window.devicePixelRatio);
	window.addEventListener("resize",$bind(this,this.onWindowResize),false);
	this.onWindowResize();
	this.element.appendChild(this.renderer.domElement);
	this.renderer.domElement.id = "renderer";
	this.messageBox = window.document.createElement("div");
	this.messageBox.id = "messageBox";
	window.document.body.appendChild(this.messageBox);
	window.document.addEventListener("keydown",$bind(this,this.onKeyDown));
	window.document.addEventListener("keyup",$bind(this,this.onKeyUp));
	var win = window;
	this.animate();
};
Screen.__name__ = true;
Screen.prototype = {
	onWindowResize: function() {
		var b = window.innerHeight;
		var tmp = _$UInt_UInt_$Impl_$.toFloat(window.innerWidth) / _$UInt_UInt_$Impl_$.toFloat(b);
		this.camera.aspect = tmp;
		this.camera.updateProjectionMatrix();
		var b1 = window.innerHeight;
		var aspect = _$UInt_UInt_$Impl_$.toFloat(window.innerWidth) / _$UInt_UInt_$Impl_$.toFloat(b1);
		this.orthoCamera.left = -100 * aspect / 2;
		this.orthoCamera.right = 100 * aspect / 2;
		this.orthoCamera.top = 50.;
		this.orthoCamera.bottom = -50.;
		this.orthoCamera.updateProjectionMatrix();
		var tmp1 = this.renderer;
		var b2 = this.downscale;
		var tmp2 = _$UInt_UInt_$Impl_$.toFloat(window.innerWidth) / _$UInt_UInt_$Impl_$.toFloat(b2);
		var b3 = this.downscale;
		tmp1.setSize(tmp2,_$UInt_UInt_$Impl_$.toFloat(window.innerHeight) / _$UInt_UInt_$Impl_$.toFloat(b3));
		this.renderer.domElement.style.width = "100%";
		this.renderer.domElement.style.height = "100%";
	}
	,animate: function() {
		requestAnimationFrame($bind(this,this.animate));
		var _g = 0;
		var _g1 = this.renderListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
		this.render();
		var message = this.messageOpacities.keys();
		while(message.hasNext()) {
			var message1 = message.next();
			var _g2 = message1;
			var _g11 = this.messageOpacities;
			var v = _g11.h[_g2.__id__] * 0.975;
			_g11.set(_g2,v);
			if(this.messageOpacities.h[message1.__id__] < 0.005) {
				this.messageOpacities.remove(message1);
				message1.remove();
			} else {
				message1.style.opacity = Std.string(this.messageOpacities.h[message1.__id__]);
			}
		}
		var key = this.keysHit.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this.keysHit.remove(key1);
		}
	}
	,render: function() {
		this.renderer.render(this.scene,this.useOrtho ? this.orthoCamera : this.camera);
	}
	,onKeyDown: function(event) {
		var code = event.code;
		if(!this.isKeyDown(code)) {
			var _this = this.keysHit;
			if(__map_reserved[code] != null) {
				_this.setReserved(code,true);
			} else {
				_this.h[code] = true;
			}
		}
		var _this1 = this.keysDown;
		if(__map_reserved[code] != null) {
			_this1.setReserved(code,true);
		} else {
			_this1.h[code] = true;
		}
	}
	,onKeyUp: function(event) {
		this.keysDown.remove(event.code);
	}
	,isKeyDown: function(code) {
		var _this = this.keysDown;
		return (__map_reserved[code] != null ? _this.getReserved(code) : _this.h[code]) == true;
	}
	,isKeyHit: function(code) {
		var _this = this.keysHit;
		return (__map_reserved[code] != null ? _this.getReserved(code) : _this.h[code]) == true;
	}
	,addRenderListener: function(func) {
		if(!Lambda.has(this.renderListeners,func)) {
			this.renderListeners.push(func);
		}
	}
	,get_width: function() {
		return window.innerWidth;
	}
	,get_height: function() {
		return window.innerHeight;
	}
	,set_wireframe: function(val) {
		return val;
	}
	,__class__: Screen
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var TestLevel = function() {
	Level.call(this);
};
TestLevel.__name__ = true;
TestLevel.__super__ = Level;
TestLevel.prototype = $extend(Level.prototype,{
	build: function() {
		this.name = "Test";
		var roadStripesPath = new THREE.ShapePath();
		ThreeUtils.mergeShapePaths(roadStripesPath,this.drawRoadLine(this.roadPath,new THREE.ShapePath(),3,0.15,RoadLineStyle.SOLID,0,1.0,2000));
		ThreeUtils.mergeShapePaths(roadStripesPath,this.drawRoadLine(this.roadPath,new THREE.ShapePath(),-3,0.15,RoadLineStyle.SOLID,0,1.0,2000));
		this.meshes.push(ThreeUtils.makeMesh(roadStripesPath,0,1000,0.58));
		var dashedLinePath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,dashedLinePath,0.0625,0.0625,RoadLineStyle.DASH(30,30),0,1,2000);
		this.drawRoadLine(this.roadPath,dashedLinePath,-0.0625,0.0625,RoadLineStyle.DASH(30,30),0,1,2000);
		this.meshes.push(ThreeUtils.makeMesh(dashedLinePath,0,1000,0.58));
		var hoopTopsPath = new THREE.ShapePath();
		var hoopSidesPath = new THREE.ShapePath();
		var hoopStyle = RoadLineStyle.DASH(1,200);
		this.drawRoadLine(this.roadPath,hoopTopsPath,0,8,hoopStyle,0,1,2000);
		this.drawRoadLine(this.roadPath,hoopSidesPath,-4,1,hoopStyle,0,1,2000);
		this.drawRoadLine(this.roadPath,hoopSidesPath,4,1,hoopStyle,0,1,2000);
		var hoopTopsMesh = ThreeUtils.makeMesh(hoopTopsPath,1,20);
		hoopTopsMesh.position.z = 4;
		this.meshes.push(hoopTopsMesh);
		var hoopSidesMesh = ThreeUtils.makeMesh(hoopSidesPath,5,20);
		this.meshes.push(hoopSidesMesh);
	}
	,__class__: TestLevel
});
var ThreeUtils = function() { };
ThreeUtils.__name__ = true;
ThreeUtils.makeSplinePath = function(pts,closed) {
	var spline = new THREE.Path();
	var spline1 = spline.curves;
	var _g = [];
	var _g1 = 0;
	while(_g1 < pts.length) {
		var pt = pts[_g1];
		++_g1;
		_g.push(new THREE.Vector3(pt.x,pt.y));
	}
	spline1.push(new THREE.CatmullRomCurve3(_g,closed));
	return spline;
};
ThreeUtils.makeCirclePath = function(x,y,radius,aClockwise) {
	if(aClockwise == null) {
		aClockwise = true;
	}
	var circle = new THREE.Path();
	circle.absarc(x,y,radius,0,Math.PI * 2,aClockwise);
	return circle;
};
ThreeUtils.makeRectanglePath = function(x,y,width,height) {
	return ThreeUtils.makePolygonPath([new THREE.Vector2(x,y),new THREE.Vector2(x + width,y),new THREE.Vector2(x + width,y + height),new THREE.Vector2(x,y + height)]);
};
ThreeUtils.makePolygonPath = function(points) {
	return new THREE.Shape(points);
};
ThreeUtils.expandPath = function(source,thickness,divisions) {
	var _g = [];
	var _g2 = 0;
	var _g1 = divisions;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(ThreeUtils.getExtrudedPointAt(source,_$UInt_UInt_$Impl_$.toFloat(i) / _$UInt_UInt_$Impl_$.toFloat(divisions),thickness / 2));
	}
	return new THREE.Path(_g);
};
ThreeUtils.expandShapePath = function(shapePath,thickness,divisions) {
	var expansion = new THREE.ShapePath();
	var _g = 0;
	var _g1 = shapePath.subPaths;
	while(_g < _g1.length) {
		var subPath = _g1[_g];
		++_g;
		expansion.subPaths.push(ThreeUtils.expandPath(subPath,thickness,divisions));
	}
	return expansion;
};
ThreeUtils.getExtrudedPointAt = function(source,t,offset) {
	while(t < 0) ++t;
	while(t > 1) --t;
	var tangent = source.getTangent(t);
	return source.getPoint(t).add(new THREE.Vector2(-tangent.y * offset,tangent.x * offset));
};
ThreeUtils.makeMesh = function(shapePath,amount,curveSegments,value,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(value == null) {
		value = 0;
	}
	var geom = amount == 0 ? new THREE.ShapeBufferGeometry(shapePath.toShapes(false,false),curveSegments) : new THREE.ExtrudeBufferGeometry(shapePath.toShapes(false,false),{ amount : amount, bevelEnabled : false, curveSegments : curveSegments});
	var numVertices = Reflect.field(geom.attributes,"position").count;
	var monochromeValues = [];
	var _g1 = 0;
	var _g = numVertices;
	while(_g1 < _g) {
		var i = _g1++;
		monochromeValues.push(value);
		monochromeValues.push(alpha);
	}
	geom.addAttribute("monochromeValue",new THREE.Float32BufferAttribute(monochromeValues,2));
	return new THREE.Mesh(geom,ThreeUtils.silhouette);
};
ThreeUtils.flattenMesh = function(mesh) {
	var geom = mesh.geometry;
	geom.applyMatrix(mesh.matrix);
	mesh.matrix.identity();
};
ThreeUtils.minDistSquaredIndex = function(points,toPoint) {
	var minimum = Infinity;
	var minimumPoint = -1;
	var _g1 = 0;
	var _g = points.length;
	while(_g1 < _g) {
		var i = _g1++;
		var point = points[i];
		var dx = toPoint.x - point.x;
		var dy = toPoint.y - point.y;
		var distSquared = dx * dx + dy * dy;
		if(minimum > distSquared) {
			minimum = distSquared;
			minimumPoint = i;
		}
	}
	return minimumPoint;
};
ThreeUtils.diffAngle = function(a,b) {
	a %= Math.PI * 2;
	b %= Math.PI * 2;
	if(a - b > Math.PI) {
		b += Math.PI * 2;
	} else if(b - a > Math.PI) {
		a += Math.PI * 2;
	}
	return b - a;
};
ThreeUtils.lerpAngle = function(from,to,amount) {
	return from + ThreeUtils.diffAngle(from,to) * amount;
};
ThreeUtils.mergeShapePaths = function(shapePath,other) {
	var _g = 0;
	var _g1 = other.subPaths;
	while(_g < _g1.length) {
		var path = _g1[_g];
		++_g;
		shapePath.subPaths.push(path.clone());
	}
};
ThreeUtils.addPath = function(shapePath,path) {
	shapePath.subPaths.push(path.clone());
};
ThreeUtils.distance = function(v1,v2) {
	var dx = v1.x - v2.x;
	var dy = v1.y - v2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
var Tunnel = function() {
	Level.call(this);
};
Tunnel.__name__ = true;
Tunnel.__super__ = Level;
Tunnel.prototype = $extend(Level.prototype,{
	build: function() {
		this.name = "The Tunnel";
		this.tint = new THREE.Color(0.2,0.7,0.1);
		var tarmac = 0.1;
		var whiteLinesColor = 0.8;
		var lightColor = 1;
		var wallColor = 0;
		var tarmacPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,tarmacPath,0,7,RoadLineStyle.SOLID,0,1,1);
		var tarmacMesh = ThreeUtils.makeMesh(tarmacPath,0,1000,tarmac);
		this.meshes.push(tarmacMesh);
		var roadLinesPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,roadLinesPath,-3.5,0.2,RoadLineStyle.DASH(30,2),0,1,5);
		this.drawRoadLine(this.roadPath,roadLinesPath,3.5,0.2,RoadLineStyle.DASH(30,2),0,1,5);
		this.drawRoadLine(this.roadPath,roadLinesPath,-0.15,0.15,RoadLineStyle.DASH(4,8),0,1,1);
		var roadLinesMesh = ThreeUtils.makeMesh(roadLinesPath,0,1000,whiteLinesColor);
		roadLinesMesh.position.z = 0.01;
		this.meshes.push(roadLinesMesh);
		var crossingPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,crossingPath,0,1,RoadLineStyle.DASH(2,200),0,1,1);
		var crossingMesh = ThreeUtils.makeMesh(crossingPath,0,1000,tarmac);
		crossingMesh.position.z = 0.001;
		this.meshes.push(crossingMesh);
		var crossingLinesPath = new THREE.ShapePath();
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			var width = 0.5;
			this.drawRoadLine(this.roadPath,crossingLinesPath,i * 2 * width - 3 + width,width,RoadLineStyle.DASH(2,200),0,1,1);
		}
		var crossingLinesMesh = ThreeUtils.makeMesh(crossingLinesPath,0,1000,whiteLinesColor);
		crossingLinesMesh.position.z = 0.01;
		this.meshes.push(crossingLinesMesh);
		var lightsPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,lightsPath,-4,0.1,RoadLineStyle.DASH(4,6),0,1,1);
		this.drawRoadLine(this.roadPath,lightsPath,4,0.1,RoadLineStyle.DASH(4,6),0,1,1);
		var lightsMesh = ThreeUtils.makeMesh(lightsPath,0.1,1000,lightColor);
		this.meshes.push(lightsMesh);
		lightsMesh.position.z = 4;
		var wallPath = new THREE.ShapePath();
		this.drawRoadLine(this.roadPath,wallPath,-5,0.4,RoadLineStyle.SOLID,0,1,800);
		this.drawRoadLine(this.roadPath,wallPath,5,0.4,RoadLineStyle.SOLID,0,1,800);
		var wallMesh = ThreeUtils.makeMesh(wallPath,4,1000,wallColor);
		this.meshes.push(wallMesh);
	}
	,__class__: Tunnel
});
var _$UInt_UInt_$Impl_$ = {};
_$UInt_UInt_$Impl_$.__name__ = true;
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var js_three__$ArrayLike_ArrayLike_$Impl_$ = {};
js_three__$ArrayLike_ArrayLike_$Impl_$.__name__ = true;
js_three__$ArrayLike_ArrayLike_$Impl_$.get = function(this1,key) {
	return this1[key];
};
js_three__$ArrayLike_ArrayLike_$Impl_$.arrayWrite = function(this1,k,v) {
	this1[k] = v;
	return v;
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
RoadPath.EPSILON = 0.00001;
TestLevel.DIVISIONS = 2000;
ThreeUtils.silhouette = new THREE.RawShaderMaterial({ vertexShader : "\n            uniform vec3 tint;\n            attribute vec2 monochromeValue;\n            attribute vec3 position;\n            uniform mat4 projectionMatrix;\n            uniform mat4 modelViewMatrix;\n            varying vec4 vColor;\n            void main() {\n                float value = monochromeValue.r;\n                vec3 color = value < 0.5\n                    ? mix(vec3(0.0), tint, value * 2.0)\n                    : mix(tint, vec3(1.0), value * 2.0 - 1.0);\n                vColor = vec4(color, monochromeValue.g);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }\n        ", fragmentShader : "\n            precision highp float;\n            varying vec4 vColor;\n            void main() {\n                gl_FragColor = vColor;\n            }\n        ", transparent : true});
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
